service: serverless-accession-example

provider:
  name: aws
  runtime: python3.6
  environment:
    DYNAMODB_TABLE: "${self:service}-${opt:stage, self:provider.stage}-accessions"
    FIELD_NAME: "last_accession"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  getAccession:
    handler: handler.get_accession
    events:
      - http:
          path: accession
          method: get
  getUUID:
    handler: handler.get_uuid
    events:
      - http:
          path: uuid
          method: get
  getSHA1:
    handler: handler.get_sha1
    events:
      - http:
          path: sha1
          method: post

resources:
  Resources:
    AccessionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}